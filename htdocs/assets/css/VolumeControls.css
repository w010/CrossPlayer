
:root {

    /*
        Configuration & default theme
        To customize override these vars in app's local sheet
    */


    /* size factor (to easy resize) */
    --vc-size: 1;

    /* whole item (ctrl) with scale etc. */
    --vc-width-overall: 2.4em;
    --vc-height-overall: 2.4em;


    /* Scale */
    --vc-scale-width: var( --vc-width-overall );
    --vc-scale-height: var( --vc-height-overall );

    --vc-scale-markline-background: #222222dd;
    --vc-scale-markline-border-radius: .08em;
    --vc-scale-markline-width: .08em;
    --vc-scale-markline-height: 1em;
    --vc-scale-markline-indent: .3em;



    /* Knob */
    --vc-knob-width: 2em;
    --vc-knob-height: 2em;
    /* this calc doesn't do what's supposed, so put them by hand */
    /*--vc-knob-offset-x: calc((var(--vc-width-overall) - var(--vc-width-knob)) * 50%);*/
    --vc-knob-offset-x: .2em;
    --vc-knob-offset-y: .2em;
    --vc-knob-border: none;
    --vc-knob-border-radius: 49%;   /* draw it slightly misshapen, to add some naturals */
    --vc-knob-background: transparent;
    --vc-knob-box-shadow: .16em .1em .31em 0  #080808a6;
    /*--vc-knob-box-shadow: .16em .1em .31em 0 #080808a6;*/


    /* Rondo: 100% of knob */
    --vc-rondo-width: 100%;
    --vc-rondo-height: 100%;
    --vc-rondo-border: none;
    --vc-rondo-border-radius: 49%;
    --vc-rondo-background: linear-gradient(155deg, #5f2f2f 25%, #1b0f0f 75%);
    --vc-rondo-box-shadow: none;


    /* Turn part of the knob (the holder, or how to call that thing.) */
    --vc-turn-width: 1.2em;
    --vc-turn-height: 1.2em;
    --vc-turn-offset-x: .4em;  /* offset by: half of (difference between Knob and Knob-Turn) */
    --vc-turn-offset-y: .4em;
    --vc-turn-border: .05em solid rgba(110, 54, 54, .66);    /* .053em solid #1b0f0fa8; */
    --vc-turn-border-radius: 35%;
    --vc-turn-background: linear-gradient(155deg, #1b0f0f 25%, #5f2f2f 75%);
    --vc-turn-box-shadow: .16em .1em .31em 0  #080808a6;


    /* Pointer line (one on the KNOB) */
    --vc-pointer_turn-offset-y: -.01em;
    --vc-pointer_turn-offset-x: 0;
    --vc-pointer_turn-width: .05em;
    --vc-pointer_turn-height: .5em;
    --vc-pointer_turn-border: .05em solid #bd7f12bf;
    --vc-pointer_turn-border-radius: .16em;
    --vc-pointer_turn-box-shadow: .16em .1em .31em 0  #080808a6;
    --vc-pointer_turn-background: rgba(243, 176, 52, .5);


    /* Pointer line (one on the RONDO) */
    --vc-pointer_rondo-offset-y: .05em;
    --vc-pointer_rondo-offset-x: 0;
    --vc-pointer_rondo-width: .05em;
    --vc-pointer_rondo-height: .25em;
    --vc-pointer_rondo-border: .05em solid #666666aa;
    --vc-pointer_rondo-border-radius: .1em;
    --vc-pointer_rondo-box-shadow: .053em .053em .053em 0  #08080855;
    --vc-pointer_rondo-background: rgba(176, 176, 176, .3);


    /* text input */
    --vc-input-text-width: 2.6em;
    --vc-input-text-font-size: .8em;
    --vc-input-text-margin: .2em auto 0;
    --vc-input-text-border: .053em solid #77777744;




    /* volume factor (to calculate styles according to current volume level) */
    --vc-volume-factor: 100;
    --vc-volume-color-saturation-max: 80;
    --vc-volume-color-saturation-min: 20;
    --vc-volume-color-saturation-scope: calc(var(--vc-volume-color-saturation-max) - var(--vc-volume-color-saturation-min));
    --vc-volume-color-saturation-result: calc( var(--vc-volume-color-saturation-min)  +  ( var(--vc-volume-color-saturation-scope)  *  var(--vc-volume-factor)  / 100 ));
    --vc-volume-color-calculated: hsl(128deg  calc(var(--vc-volume-color-saturation-result) * 1%)  45%);
    /* (must be recalculated, when changing these values) */ 
}


volume, manipulator, scale, knob, rondo, turn, pointer    {
    display: block;
}

volume {
    position: relative;
}
.volume-rotarypot {

}

    volume manipulator {
            /*border: 1px solid red;*/
        width: calc(var(--vc-size) *        var( --vc-width-overall ));
        min-height: calc(var(--vc-size) *   var( --vc-height-overall ));
        position: relative;
        margin: 0 auto;
    }

    volume.oftype-rotarypot scale  {
        position: absolute;
        top: 0;
        width: calc(var(--vc-size) *        var( --vc-scale-width ));
        height: calc(var(--vc-size) *       var( --vc-scale-height ));
        border-radius: 50%;
        
            /*background-color: #ffc720;*/
            background-color: var(--vc-volume-color-calculated);
    }
        volume.oftype-rotarypot scale scaledivider  {
                /*background: #0000ff11;*/
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
            volume.oftype-rotarypot scale scaledivider markline  {
                background: var( --vc-scale-markline-background );
                    /*background-color: #ffc720;*/
                position: absolute;
                left: 0; right: 0;
                margin: 0 auto;
                top: 0;
                width: var( --vc-scale-markline-width );
                height: var( --vc-scale-markline-height );
                border-radius: var( --vc-scale-markline-border-radius );
            }
                volume.oftype-rotarypot scale markline.indent  {
                    top: var( --vc-scale-markline-indent );
                }
    
    volume.oftype-rotarypot knob   {
        position: absolute;
        top: calc(var(--vc-size) *          var( --vc-knob-offset-y ));
        left: calc(var(--vc-size) *         var( --vc-knob-offset-x ));
        width: calc(var(--vc-size) *        var( --vc-knob-width ));
        height: calc(var(--vc-size) *       var( --vc-knob-height ));

        border: var( --vc-knob-border );
        border-radius: var( --vc-knob-border-radius );
        background: var( --vc-knob-background );
        box-shadow: var( --vc-knob-box-shadow );

        cursor: n-resize;
    }

        volume.oftype-rotarypot knob rondo  {
                /*border: 1px solid pink;*/
            position: absolute;
            width: var( --vc-rondo-width );
            height: var( --vc-rondo-height );
            top: 0;
            left: 0;

            border: var( --vc-rondo-border );
            border-radius: var( --vc-rondo-border-radius );
            background: var( --vc-rondo-background );
            box-shadow: var( --vc-rondo-box-shadow );
        }
        volume.oftype-rotarypot knob turn  {

            position: absolute;
            top: calc(var(--vc-size) *      var( --vc-turn-offset-y ));
            left: calc(var(--vc-size) *     var( --vc-turn-offset-x ));
            width: calc(var(--vc-size) *    var( --vc-turn-width ));
            height: calc(var(--vc-size) *   var( --vc-turn-height ));

            border: var( --vc-turn-border );
            border-radius: var( --vc-turn-border-radius );
            background: var( --vc-turn-background );
            box-shadow: var( --vc-turn-box-shadow );
        }
            /* pointer can be on turn and on rondo - they are separated things */
            volume.oftype-rotarypot knob pointer  {
            }

            /* TURN POINTER */
            volume.oftype-rotarypot knob turn pointer {
                display: block;
                position: relative;
                margin: 0 auto;

                top: calc(var(--vc-size) *      var( --vc-pointer_turn-offset-y ));
                left: calc(var(--vc-size) *     var( --vc-pointer_turn-offset-x ));
                width: calc(var(--vc-size) *    var( --vc-pointer_turn-width ));
                height: calc(var(--vc-size) *   var( --vc-pointer_turn-height ));

                border: var( --vc-pointer_turn-border );
                border-radius: var( --vc-pointer_turn-border-radius );
                background: var( --vc-pointer_turn-background );
                box-shadow: var( --vc-pointer_turn-box-shadow );
            }

            /* RONDO POINTER */
            volume.oftype-rotarypot knob rondo pointer {
                display: block;
                position: relative;
                margin: 0 auto;

                top: calc(var(--vc-size) *      var( --vc-pointer_rondo-offset-y ));
                left: calc(var(--vc-size) *     var( --vc-pointer_rondo-offset-x ));
                width: calc(var(--vc-size) *    var( --vc-pointer_rondo-width ));
                height: calc(var(--vc-size) *   var( --vc-pointer_rondo-height ));

                border: var( --vc-pointer_rondo-border );
                border-radius: var( --vc-pointer_rondo-border-radius );
                background: var( --vc-pointer_rondo-background );
                box-shadow: var( --vc-pointer_rondo-box-shadow );
            }


/* accompany linked fields */

volume input[type="text"],
volume input[type="range"]	{
	max-width: -webkit-fill-available;
    display: block;
    margin: 0 auto;
}
volume input[type="range"]	{
    width: -webkit-fill-available;
    margin: var( --vc-input-text-margin );
}
volume input[type="text"]   {
    width: calc(var(--vc-size) *    var( --vc-input-text-width ));
    margin: var( --vc-input-text-margin );
    font-size: calc(var(--vc-size) *    var( --vc-input-text-font-size ));
    text-align: center;
    border: var( --vc-input-text-border );

    outline: none;
    background: none;
	caret-color: transparent;
	cursor: default;
}



/* consider showing type=range only on debug: */

/*volume input[type="range"]	    {   display: none;  }*/
/*.dev volume input[type="range"]	{   display: initial;  }*/





/* CROSSFADER */

/* TODO later:
     build markup similar to rotarypot,
     remove that "-related" class and move that inside one item,
     extract theme stuff to vars */


.oftype-crossfader-related input.slider-value   {
    font-size: 1em;
    text-align: center;
    min-width: 2em;
    width: auto;
    color: #808080;
    background-color: transparent;
    border-color: transparent;
    /* font-family: Tahoma, Arial, serif; */
    font-family: Consolas, serif;
}

.oftype-crossfader-related input.slider-value:focus   {
    box-shadow: 0 0 0 .25rem  rgba(0, 58, 145, .25);
    background-color: #262b31 !important;
    border-color: transparent !important;
    outline: none;
    color: #d3d3d3;
}

    .crossfader-wrap    {
        box-shadow: .053em .1em .053em 0  #080808a6;
        margin: 2.6em auto 2em;
        border: .053em solid #4f4f4f;
        border-radius: .16em;
        position: relative;
        top: 3.5em;
    }

.oftype-crossfader {
    border: .16em solid #181818;
    background-color: #cd5c5c7a;    /* color of the RIGHT side of the bar */
    box-shadow: .2em  -.26em  .26em  0  #080808a6 inset;
    border-radius: .16em;
    transition: filter .3s;
    cursor: e-resize;
}
    
    .crossfader:hover  {
        filter: brightness(105%);
    }

/* this element is paralell to .crossfader-wrap */
#crossfader .input-group {
    top: 2em;
}

.oftype-crossfader .fader-range   {
    background-color: #163e79ed;      /* color of the LEFT side of the bar */
    box-shadow: .2em  -.26em  .26em  0  #080808a6 inset;
}

.oftype-crossfader .fader-handle   {
    font-weight: normal;
    outline: none;
    top: -1em;
    height: 2.4em;
    width: 1.1em;
    border: .16em solid #212121;
    border-radius: .1em;
    color: #555;
    box-shadow: .16em .1em .31em 0  #080808a6;
    background-image: linear-gradient(153deg, #855b5b, #18180c);
    transition: filter .3s;
    cursor: grab;
}
    .oftype-crossfader .fader-handle .inner {
        position: absolute;
        top: .1em; left: .1em;
        width: calc(100% - .2em); height: calc(100% - .2em);
        border: .16em solid #554949;
        border-radius: .1em;
        box-shadow: .16em .16em .26em 0  #080808a6 inset;
        background-image: linear-gradient(275deg, #525252, #3f3e3e);
        border-right-color: #353535;
        border-bottom-color: #3b3333;
    }

    .oftype-crossfader .fader-handle .cut    {
        height: .26em;
        border: .053em solid #0c0c0ccc;
        top: 0;
        width: .1em;
        left: calc(50% - .053em);
        position: absolute;
        box-shadow: .053em .1em .16em .1em  #2727279e;
    }

.oftype-crossfader .fader-handle:active {
    cursor: grabbing;
}

.oftype-crossfader .fader-handle:hover {
    /*filter: saturate(160%);*/
    filter: brightness(105%);
}

.crossfader-wrap .scale {
    height: 3em;
    width: 100%;
    position: absolute;
    top: -3.6em;    /* offset whole wrap by this value */
}

.crossfader-wrap .scale .markline {
    position: absolute;
    bottom: 0;
    width: .053em;
    /*background-color: #333;*/
    background-color: #666;
    height: 1.5em;
}


