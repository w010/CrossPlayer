
volume {

    /*
        Configuration & default theme
        To customize override these vars in app's local sheet
    */


    /* size factor (to easy resize) */
    --vc-size: 1;

    /* whole item (ctrl) with scale etc. */
    --vc-width-overall: 2.4em;
    --vc-height-overall: 2.4em;


    /* Scale */
    --vc-scale-width: var( --vc-width-overall );
    --vc-scale-height: var( --vc-height-overall );


    /* Knob */
    --vc-knob-width: 2em;
    --vc-knob-height: 2em;
    /* this calc doesn't do what's supposed, so put them by hand */
    /*--vc-knob-offset-x: calc((var(--vc-width-overall) - var(--vc-width-knob)) * 50%);*/
    --vc-knob-offset-x: 0.2em;
    --vc-knob-offset-y: 0.2em;
    --vc-knob-border: none;
    --vc-knob-border-radius: 49%;   /* draw it slightly misshapen, to add some naturals */
    --vc-knob-background: transparent;
    --vc-knob-box-shadow: 3px 2px 6px 0px #080808a6;


    /* Rondo: 100% of knob */
    --vc-rondo-width: 100%;
    --vc-rondo-height: 100%;
    --vc-rondo-border: none;
    --vc-rondo-border-radius: 49%;
    --vc-rondo-background: linear-gradient(155deg, #5f2f2f 25%, #1b0f0f 75%);
    --vc-rondo-box-shadow: none;


    /* Turn part of the knob (the holder, or how to call that thing.) */
    --vc-turn-width: 1.2em;
    --vc-turn-height: 1.2em;
    --vc-turn-offset-x: 0.4em;  /* offset by: half of (difference between Knob and Knob-Turn) */
    --vc-turn-offset-y: 0.4em;
    --vc-turn-border: 1px solid rgba(110, 54, 54, 0.66);    /* 1px solid #1b0f0fa8; */
    --vc-turn-border-radius: 35%;
    --vc-turn-background: linear-gradient(155deg, #1b0f0f 25%, #5f2f2f 75%);
    --vc-turn-box-shadow: 3px 2px 6px 0px #080808a6;


    /* Pointer line (one on the KNOB) */
    --vc-pointer_turn-offset-y: -1px;
    --vc-pointer_turn-offset-x: 0;
    --vc-pointer_turn-width: 0.05em;
    --vc-pointer_turn-height: 0.5em;
    --vc-pointer_turn-border: 1px solid #bd7f12bf;
    --vc-pointer_turn-border-radius: 3px;
    --vc-pointer_turn-box-shadow: 3px 2px 6px 0px #080808a6;


    /* todo: Pointer line (one on the RONDO) */
    --vc-pointer_rondo-offset-y: -1px;
    --vc-pointer_rondo-offset-x: 0;
    --vc-pointer_rondo-width: 0.05em;
    --vc-pointer_rondo-height: 0.5em;


    /* text input */
    --vc-input-text-width: 2.6em;
    --vc-input-text-font-size: 0.8em;
    --vc-input-text-margin: 0.2em auto 0;
    --vc-input-text-border: 1px solid #77777744;
}


volume, manipulator, scale, knob, rondo, turn, pointer    {
    display: block;
}

volume {
    position: relative;
}
.volume-rotarypot {

}

    volume manipulator {
            /*border: 1px solid red;*/
        width: calc(var(--vc-size) *        var( --vc-width-overall ));
        min-height: calc(var(--vc-size) *   var( --vc-height-overall ));
        position: relative;
        margin: 0 auto;
    }

    volume.oftype-rotarypot scale  {
        position: absolute;
        top: 0;
        width: calc(var(--vc-size) *        var( --vc-scale-width ));
        height: calc(var(--vc-size) *       var( --vc-scale-height ));
        border-radius: 50%;
        
            background-color: #ffc720;
    }
    volume.oftype-rotarypot knob   {
        position: absolute;
        top: calc(var(--vc-size) *          var( --vc-knob-offset-y ));
        left: calc(var(--vc-size) *         var( --vc-knob-offset-x ));
        width: calc(var(--vc-size) *        var( --vc-knob-width ));
        height: calc(var(--vc-size) *       var( --vc-knob-height ));

        border: var( --vc-knob-border );
        border-radius: var( --vc-knob-border-radius );
        background: var( --vc-knob-background );
        box-shadow: var( --vc-knob-box-shadow );

        cursor: n-resize;
    }

        volume.oftype-rotarypot knob rondo  {
                /*border: 1px solid pink;*/
            position: absolute;
            width: var( --vc-rondo-width );
            height: var( --vc-rondo-height );
            top: 0;
            left: 0;

            border: var( --vc-rondo-border );
            border-radius: var( --vc-rondo-border-radius );
            background: var( --vc-rondo-background );
            box-shadow: var( --vc-rondo-box-shadow );
        }
        volume.oftype-rotarypot knob turn  {

            position: absolute;
            top: calc(var(--vc-size) *      var( --vc-turn-offset-y ));
            left: calc(var(--vc-size) *     var( --vc-turn-offset-x ));
            width: calc(var(--vc-size) *    var( --vc-turn-width ));
            height: calc(var(--vc-size) *   var( --vc-turn-height ));

            border: var( --vc-turn-border );
            border-radius: var( --vc-turn-border-radius );
            background: var( --vc-turn-background );
            box-shadow: var( --vc-turn-box-shadow );
        }
        /* pointer can be on turn and on rondo - they are separated things */
        volume.oftype-rotarypot knob pointer  {
            
        }
        volume.oftype-rotarypot knob turn pointer {
            display: block;
            position: relative;
            margin: 0 auto;

            top: calc(var(--vc-size) *      var( --vc-pointer_turn-offset-y ));
            left: calc(var(--vc-size) *     var( --vc-pointer_turn-offset-x ));
            width: calc(var(--vc-size) *    var( --vc-pointer_turn-width ));
            height: calc(var(--vc-size) *   var( --vc-pointer_turn-height ));

            border: var( --vc-pointer_turn-border );
            border-radius: var( --vc-pointer_turn-border-radius );
            box-shadow: var( --vc-pointer_turn-box-shadow );
        }


/* accompany linked fields */

volume input[type="text"],
volume input[type="range"]	{
	max-width: -webkit-fill-available;
    display: block;
    margin: 0 auto;
}
volume input[type="range"]	{
    width: -webkit-fill-available;
    margin: var( --vc-input-text-margin );
}
volume input[type="text"]   {
    width: calc(var(--vc-size) *    var( --vc-input-text-width ));
    margin: var( --vc-input-text-margin );
    font-size: calc(var(--vc-size) *    var( --vc-input-text-font-size ));
    text-align: center;
    border: var( --vc-input-text-border );

    outline: none;
    background: none;
	caret-color: transparent;
	cursor: default;
}



/* consider showing type=range only on debug: */

/*volume input[type="range"]	    {   display: none;  }*/
/*.dev volume input[type="range"]	{   display: initial;  }*/





/* CROSSFADER */

/* TODO later:
     build markup similar to rotarypot,
     remove that "-related" class and move that inside one item,
     extract theme stuff to vars */


.oftype-crossfader-related input.slider-value   {
    font-size: 1em;
    text-align: center;
    min-width: 2em;
    width: auto;
    color: #808080;
    background-color: transparent;
    border-color: transparent;
}

.oftype-crossfader-related input.slider-value:focus   {
    box-shadow: 0 0 0 0.25rem rgba(0, 58, 145, 0.25);
    background-color: #262b31 !important;
    border-color: transparent !important;
    outline: none;
    color: #d3d3d3;
}

    .crossfader-wrap    {
        box-shadow: 1px 2px 1px 0px #080808a6;
        margin: 50px auto 40px;
        border: 1px solid #4f4f4f;
        border-radius: 3px;
        position: relative;
        top: 3.5em;
    }

.oftype-crossfader {
    border: 3px solid #181818;
    background-color: #cd5c5c7a;    /* color of the RIGHT side of the bar */
    box-shadow: inset 4px -5px 5px 0px #080808a6;
    border-radius: 3px;
    transition: filter .3s;
    cursor: e-resize;
}
    
    .crossfader:hover  {
        filter: brightness(105%);
    }

/* this element is paralell to .crossfader-wrap */
#crossfader .input-group {
    top: 2em;
}

.oftype-crossfader .fader-range   {
    background-color: #163e79ed;      /* color of the LEFT side of the bar */
    box-shadow: inset 4px -5px 5px 0px #080808a6;
}

.oftype-crossfader .fader-handle   {
    font-weight: normal;
    outline: none;
    top: -1em;
    height: 2.4em;
    width: 1.1em;
    border: 3px solid #212121;
    border-radius: 2px;
    color: #555;
    box-shadow: 3px 2px 6px 0px #080808a6;
    background-image: linear-gradient(153deg, #855b5b, #18180c);
    transition: filter .3s;
    cursor: grab;
}
    .oftype-crossfader .fader-handle .inner {
        position: absolute;
        top: 2px; left: 2px;
        width: calc(100% - 4px); height: calc(100% - 4px);
        border: 3px solid #554949;
        border-radius: 2px;
        box-shadow: inset 3px 3px 5px 0px #080808a6;
        background-image: linear-gradient(275deg, #525252, #3f3e3e);
        border-right-color: #353535;
        border-bottom-color: #3b3333;
    }

    .oftype-crossfader .fader-handle .cut    {
        height: 5px;
        border: 1px solid #0c0c0ccc;
        top: 0;
        width: 2px;
        left: calc(50% - 1px);
        position: absolute;
        box-shadow: 1px 2px 3px 2px #2727279e;
    }

.oftype-crossfader .fader-handle:active {
    cursor: grabbing;
}

.oftype-crossfader .fader-handle:hover {
    /*filter: saturate(160%);*/
    filter: brightness(105%);
}

.crossfader-wrap .scale {
    height: 3em;
    width: 100%;
    position: absolute;
    top: -3.6em;    /* offset whole wrap by this value */
}

.crossfader-wrap .scale .markline {
    position: absolute;
    bottom: 0;
    width: 1px;
    /*background-color: #333;*/
    background-color: #666;
    height: 30px;
}


